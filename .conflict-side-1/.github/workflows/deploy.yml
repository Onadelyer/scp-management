name: Deploy to EC2

on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_KEY }}


      - name: Set Deployment Variables
        id: vars
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "ENV=main" >> $GITHUB_OUTPUT
            echo "SERVER_IP=${{ secrets.MAIN_SERVER_IP }}" >> $GITHUB_OUTPUT
            echo "SSH_KEY=${{ secrets.SSH_KEY }}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF}" == "refs/heads/dev" ]; then
            echo "ENV=dev" >> $GITHUB_OUTPUT
            echo "SERVER_IP=${{ secrets.DEV_SERVER_IP }}" >> $GITHUB_OUTPUT
            echo "SSH_KEY=${{ secrets.SSH_KEY }}" >> $GITHUB_OUTPUT
          else
            echo "Unsupported branch" && exit 1
          fi

      - name: Set up SSH key for ${{ steps.vars.outputs.ENV }}
        if: always()
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ steps.vars.outputs.SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          ssh-keyscan -H ${{ steps.vars.outputs.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        env:
            SERVER_IP: ${{ steps.vars.outputs.SERVER_IP }}
            EC2_USER: ${{ secrets.EC2_USER }}
        run: |
            ssh $EC2_USER@$SERVER_IP << 'EOF'
            if [ ! -d "/home/ec2-user/scp-management" ]; then
            mkdir -p /home/ec2-user/scp-management
            fi
            cd /home/ec2-user/scp-management || exit

            if [ ! -d ".git" ]; then
            git clone https://github.com/${{ github.repository }} .
            else
            git pull origin ${{ github.ref_name }}
            fi

            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            EOF
